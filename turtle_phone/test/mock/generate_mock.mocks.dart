// Mocks generated by Mockito 5.4.2 from annotations
// in turtle_phone/test/mock/generate_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i26;
import 'dart:io' as _i27;
import 'dart:typed_data' as _i28;

import 'package:flutter_bloc/flutter_bloc.dart' as _i29;
import 'package:flutter_sound/public/flutter_sound_player.dart' as _i36;
import 'package:mockito/mockito.dart' as _i1;
import 'package:turtle_package/data/communication/socket/phone_box_socket_state.dart'
    as _i37;
import 'package:turtle_package/data/remote/remote_auth_datasource.dart' as _i40;
import 'package:turtle_package/data/remote/remote_device_datasource.dart'
    as _i42;
import 'package:turtle_package/data/remote/remote_device_users_datasource.dart'
    as _i43;
import 'package:turtle_package/data/remote/remote_message_datasource.dart'
    as _i41;
import 'package:turtle_package/domain/repository/auth_repository.dart' as _i38;
import 'package:turtle_package/domain/repository/device_repository.dart'
    as _i16;
import 'package:turtle_package/domain/repository/device_user_repository.dart'
    as _i17;
import 'package:turtle_package/domain/repository/message_repository.dart'
    as _i14;
import 'package:turtle_package/domain/repository/upload_repository.dart'
    as _i15;
import 'package:turtle_package/domain/sound/sound_api.dart' as _i19;
import 'package:turtle_package/domain/usecase/auth_usecase.dart' as _i2;
import 'package:turtle_package/domain/usecase/device_usecase.dart' as _i5;
import 'package:turtle_package/domain/usecase/device_user_usecase.dart' as _i7;
import 'package:turtle_package/model/auth_device_user.dart' as _i39;
import 'package:turtle_package/model/config_devices.dart' as _i34;
import 'package:turtle_package/model/device.dart' as _i23;
import 'package:turtle_package/model/device_user.dart' as _i18;
import 'package:turtle_package/model/message.dart' as _i25;
import 'package:turtle_phone/domain/communication/phone_box_com.dart' as _i21;
import 'package:turtle_phone/domain/communication/phone_turtle_com.dart'
    as _i20;
import 'package:turtle_phone/domain/config/wifi_information.dart' as _i22;
import 'package:turtle_phone/domain/usecase/init_phone_usecase.dart' as _i10;
import 'package:turtle_phone/domain/usecase/phone_message_usecase.dart' as _i3;
import 'package:turtle_phone/domain/usecase/sound_phone_usecase.dart' as _i12;
import 'package:turtle_phone/presentation/bloc/device_bloc.dart' as _i30;
import 'package:turtle_phone/presentation/bloc/device_state.dart' as _i6;
import 'package:turtle_phone/presentation/bloc/device_users_bloc.dart' as _i31;
import 'package:turtle_phone/presentation/bloc/device_users_state.dart' as _i8;
import 'package:turtle_phone/presentation/bloc/init_device_bloc.dart' as _i33;
import 'package:turtle_phone/presentation/bloc/init_device_state.dart' as _i11;
import 'package:turtle_phone/presentation/bloc/phone_message_bloc.dart' as _i24;
import 'package:turtle_phone/presentation/bloc/phone_message_state.dart' as _i4;
import 'package:turtle_phone/presentation/bloc/sound_phone_bloc.dart' as _i35;
import 'package:turtle_phone/presentation/bloc/sound_state.dart' as _i13;
import 'package:turtle_phone/presentation/bloc/user_bloc.dart' as _i32;
import 'package:turtle_phone/presentation/bloc/user_state.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthUseCase_0 extends _i1.SmartFake implements _i2.AuthUseCase {
  _FakeAuthUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhoneMessageUseCase_1 extends _i1.SmartFake
    implements _i3.PhoneMessageUseCase {
  _FakePhoneMessageUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhoneMessageState_2 extends _i1.SmartFake
    implements _i4.PhoneMessageState {
  _FakePhoneMessageState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceUseCase_3 extends _i1.SmartFake implements _i5.DeviceUseCase {
  _FakeDeviceUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceState_4 extends _i1.SmartFake implements _i6.DeviceState {
  _FakeDeviceState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceUsersUseCase_5 extends _i1.SmartFake
    implements _i7.DeviceUsersUseCase {
  _FakeDeviceUsersUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceUsersState_6 extends _i1.SmartFake
    implements _i8.DeviceUsersState {
  _FakeDeviceUsersState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserState_7 extends _i1.SmartFake implements _i9.UserState {
  _FakeUserState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInitPhoneUseCase_8 extends _i1.SmartFake
    implements _i10.InitPhoneUseCase {
  _FakeInitPhoneUseCase_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInitDeviceState_9 extends _i1.SmartFake
    implements _i11.InitDeviceState {
  _FakeInitDeviceState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSoundPhoneUseCase_10 extends _i1.SmartFake
    implements _i12.SoundPhoneUseCase {
  _FakeSoundPhoneUseCase_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSoundState_11 extends _i1.SmartFake implements _i13.SoundState {
  _FakeSoundState_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageRepository_12 extends _i1.SmartFake
    implements _i14.MessageRepository {
  _FakeMessageRepository_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUploadRepository_13 extends _i1.SmartFake
    implements _i15.UploadRepository {
  _FakeUploadRepository_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceRepository_14 extends _i1.SmartFake
    implements _i16.DeviceRepository {
  _FakeDeviceRepository_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceUsersRepository_15 extends _i1.SmartFake
    implements _i17.DeviceUsersRepository {
  _FakeDeviceUsersRepository_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceUser_16 extends _i1.SmartFake implements _i18.DeviceUser {
  _FakeDeviceUser_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSoundApi_17 extends _i1.SmartFake implements _i19.SoundApi {
  _FakeSoundApi_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhoneDeviceCommunication_18 extends _i1.SmartFake
    implements _i20.PhoneDeviceCommunication {
  _FakePhoneDeviceCommunication_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhoneBoxCommunication_19 extends _i1.SmartFake
    implements _i21.PhoneBoxCommunication {
  _FakePhoneBoxCommunication_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWifiInformation_20 extends _i1.SmartFake
    implements _i22.WifiInformation {
  _FakeWifiInformation_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDevice_21 extends _i1.SmartFake implements _i23.Device {
  _FakeDevice_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhoneMessageBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoneMessageBloc extends _i1.Mock implements _i24.PhoneMessageBloc {
  MockPhoneMessageBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get turtleId => (super.noSuchMethod(
        Invocation.getter(#turtleId),
        returnValue: '',
      ) as String);
  @override
  String get userNameForTurtle => (super.noSuchMethod(
        Invocation.getter(#userNameForTurtle),
        returnValue: '',
      ) as String);
  @override
  _i2.AuthUseCase get authUseCase => (super.noSuchMethod(
        Invocation.getter(#authUseCase),
        returnValue: _FakeAuthUseCase_0(
          this,
          Invocation.getter(#authUseCase),
        ),
      ) as _i2.AuthUseCase);
  @override
  _i3.PhoneMessageUseCase get messageUseCase => (super.noSuchMethod(
        Invocation.getter(#messageUseCase),
        returnValue: _FakePhoneMessageUseCase_1(
          this,
          Invocation.getter(#messageUseCase),
        ),
      ) as _i3.PhoneMessageUseCase);
  @override
  List<_i25.Message> get messages => (super.noSuchMethod(
        Invocation.getter(#messages),
        returnValue: <_i25.Message>[],
      ) as List<_i25.Message>);
  @override
  set messages(List<_i25.Message>? _messages) => super.noSuchMethod(
        Invocation.setter(
          #messages,
          _messages,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.PhoneMessageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePhoneMessageState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.PhoneMessageState);
  @override
  _i26.Stream<_i4.PhoneMessageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i4.PhoneMessageState>.empty(),
      ) as _i26.Stream<_i4.PhoneMessageState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i26.Future<void> sendMessage(_i25.Message? message) => (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> sendMessageWithFiles(
    _i25.Message? message,
    List<_i27.File>? files,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessageWithFiles,
          [
            message,
            files,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> sendMessageWithDatas(
    _i25.Message? message,
    List<_i28.Uint8List>? datas,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessageWithDatas,
          [
            message,
            datas,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> stopListening() => (super.noSuchMethod(
        Invocation.method(
          #stopListening,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> getMoreMessages() => (super.noSuchMethod(
        Invocation.method(
          #getMoreMessages,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> getMessages() => (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  void emit(_i4.PhoneMessageState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i29.Change<_i4.PhoneMessageState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [DeviceBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceBloc extends _i1.Mock implements _i30.DeviceBloc {
  MockDeviceBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.DeviceUseCase get deviceUseCase => (super.noSuchMethod(
        Invocation.getter(#deviceUseCase),
        returnValue: _FakeDeviceUseCase_3(
          this,
          Invocation.getter(#deviceUseCase),
        ),
      ) as _i5.DeviceUseCase);
  @override
  _i2.AuthUseCase get authUseCase => (super.noSuchMethod(
        Invocation.getter(#authUseCase),
        returnValue: _FakeAuthUseCase_0(
          this,
          Invocation.getter(#authUseCase),
        ),
      ) as _i2.AuthUseCase);
  @override
  _i6.DeviceState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDeviceState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.DeviceState);
  @override
  _i26.Stream<_i6.DeviceState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i6.DeviceState>.empty(),
      ) as _i26.Stream<_i6.DeviceState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i26.Future<void> deleteDevice(
    String? idDevice,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDevice,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> stopListenDevice(String? idDevice) => (super.noSuchMethod(
        Invocation.method(
          #stopListenDevice,
          [idDevice],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> listenDevice(String? idDevice) => (super.noSuchMethod(
        Invocation.method(
          #listenDevice,
          [idDevice],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> getDevicesByUser(_i23.DeviceType? deviceType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevicesByUser,
          [deviceType],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> getDeviceSettings(
    String? idDevice,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceSettings,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> updateDeviceSettings(_i23.Device? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeviceSettings,
          [device],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  void emit(_i6.DeviceState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i29.Change<_i6.DeviceState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [DeviceUsersBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceUsersBloc extends _i1.Mock implements _i31.DeviceUsersBloc {
  MockDeviceUsersBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.DeviceUsersUseCase get deviceUsersUseCase => (super.noSuchMethod(
        Invocation.getter(#deviceUsersUseCase),
        returnValue: _FakeDeviceUsersUseCase_5(
          this,
          Invocation.getter(#deviceUsersUseCase),
        ),
      ) as _i7.DeviceUsersUseCase);
  @override
  _i2.AuthUseCase get authUseCase => (super.noSuchMethod(
        Invocation.getter(#authUseCase),
        returnValue: _FakeAuthUseCase_0(
          this,
          Invocation.getter(#authUseCase),
        ),
      ) as _i2.AuthUseCase);
  @override
  _i8.DeviceUsersState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDeviceUsersState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.DeviceUsersState);
  @override
  _i26.Stream<_i8.DeviceUsersState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i8.DeviceUsersState>.empty(),
      ) as _i26.Stream<_i8.DeviceUsersState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i26.Future<void> createInvitUser(
    String? email,
    String? idDevice,
    String? nameDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInvitUser,
          [
            email,
            idDevice,
            nameDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> acceptInvitation(Map<String, dynamic>? invitationParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptInvitation,
          [invitationParams],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> removeUserOfDevice(
    _i18.DeviceUser? deviceUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserOfDevice,
          [
            deviceUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> addUserToEmergency(
    _i18.DeviceUser? deviceUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToEmergency,
          [
            deviceUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> removeUserEmergency(
    _i18.DeviceUser? deviceUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserEmergency,
          [
            deviceUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> changeAdmin(
    String? idUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeAdmin,
          [
            idUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  dynamic getDeviceUsers(String? idDevice) =>
      super.noSuchMethod(Invocation.method(
        #getDeviceUsers,
        [idDevice],
      ));
  @override
  _i26.Future<void> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i8.DeviceUsersState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i29.Change<_i8.DeviceUsersState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [UserBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserBloc extends _i1.Mock implements _i32.UserBloc {
  MockUserBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.DeviceUsersUseCase get userUseCase => (super.noSuchMethod(
        Invocation.getter(#userUseCase),
        returnValue: _FakeDeviceUsersUseCase_5(
          this,
          Invocation.getter(#userUseCase),
        ),
      ) as _i7.DeviceUsersUseCase);
  @override
  set userUseCase(_i7.DeviceUsersUseCase? _userUseCase) => super.noSuchMethod(
        Invocation.setter(
          #userUseCase,
          _userUseCase,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.AuthUseCase get authUsecase => (super.noSuchMethod(
        Invocation.getter(#authUsecase),
        returnValue: _FakeAuthUseCase_0(
          this,
          Invocation.getter(#authUsecase),
        ),
      ) as _i2.AuthUseCase);
  @override
  set authUsecase(_i2.AuthUseCase? _authUsecase) => super.noSuchMethod(
        Invocation.setter(
          #authUsecase,
          _authUsecase,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set currentUser(_i18.DeviceUser? _currentUser) => super.noSuchMethod(
        Invocation.setter(
          #currentUser,
          _currentUser,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.UserState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeUserState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.UserState);
  @override
  _i26.Stream<_i9.UserState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i9.UserState>.empty(),
      ) as _i26.Stream<_i9.UserState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i26.Future<void> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> updateUser(_i18.DeviceUser? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  void emit(_i9.UserState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i29.Change<_i9.UserState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [InitDeviceBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitDeviceBloc extends _i1.Mock implements _i33.InitDeviceBloc {
  MockInitDeviceBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.InitPhoneUseCase get initPhoneUseCase => (super.noSuchMethod(
        Invocation.getter(#initPhoneUseCase),
        returnValue: _FakeInitPhoneUseCase_8(
          this,
          Invocation.getter(#initPhoneUseCase),
        ),
      ) as _i10.InitPhoneUseCase);
  @override
  _i11.InitDeviceState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeInitDeviceState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.InitDeviceState);
  @override
  _i26.Stream<_i11.InitDeviceState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i11.InitDeviceState>.empty(),
      ) as _i26.Stream<_i11.InitDeviceState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i26.Future<void> connectToBox(String? ipBox) => (super.noSuchMethod(
        Invocation.method(
          #connectToBox,
          [ipBox],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> getSSidFromPhone() => (super.noSuchMethod(
        Invocation.method(
          #getSSidFromPhone,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> startConfigTurtle() => (super.noSuchMethod(
        Invocation.method(
          #startConfigTurtle,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> sendPassword(String? password) => (super.noSuchMethod(
        Invocation.method(
          #sendPassword,
          [password],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> testWifiDevice(_i34.ConfigDevices? configDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #testWifiDevice,
          [configDevice],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> findDevice(_i23.DeviceType? deviceType) =>
      (super.noSuchMethod(
        Invocation.method(
          #findDevice,
          [deviceType],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> createDeviceAndBox(_i34.ConfigDevices? configDevices) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDeviceAndBox,
          [configDevices],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  void emit(_i11.InitDeviceState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i29.Change<_i11.InitDeviceState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [SoundPhoneBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundPhoneBloc extends _i1.Mock implements _i35.SoundPhoneBloc {
  MockSoundPhoneBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.SoundPhoneUseCase get soundUseCase => (super.noSuchMethod(
        Invocation.getter(#soundUseCase),
        returnValue: _FakeSoundPhoneUseCase_10(
          this,
          Invocation.getter(#soundUseCase),
        ),
      ) as _i12.SoundPhoneUseCase);
  @override
  _i13.SoundState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSoundState_11(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.SoundState);
  @override
  _i26.Stream<_i13.SoundState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i26.Stream<_i13.SoundState>.empty(),
      ) as _i26.Stream<_i13.SoundState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i26.Future<void> playAudio(_i28.Uint8List? data) => (super.noSuchMethod(
        Invocation.method(
          #playAudio,
          [data],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<_i36.PlaybackDisposition> getPlayerProgress() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlayerProgress,
          [],
        ),
        returnValue: _i26.Stream<_i36.PlaybackDisposition>.empty(),
      ) as _i26.Stream<_i36.PlaybackDisposition>);
  @override
  _i26.Future<void> pauseAudio() => (super.noSuchMethod(
        Invocation.method(
          #pauseAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> resumeAudio() => (super.noSuchMethod(
        Invocation.method(
          #resumeAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> stopPlayAudio() => (super.noSuchMethod(
        Invocation.method(
          #stopPlayAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  void emit(_i13.SoundState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i29.Change<_i13.SoundState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i26.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [PhoneMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoneMessageUseCase extends _i1.Mock
    implements _i3.PhoneMessageUseCase {
  MockPhoneMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.MessageRepository get messageRepository => (super.noSuchMethod(
        Invocation.getter(#messageRepository),
        returnValue: _FakeMessageRepository_12(
          this,
          Invocation.getter(#messageRepository),
        ),
      ) as _i14.MessageRepository);
  @override
  _i15.UploadRepository get uploadRepository => (super.noSuchMethod(
        Invocation.getter(#uploadRepository),
        returnValue: _FakeUploadRepository_13(
          this,
          Invocation.getter(#uploadRepository),
        ),
      ) as _i15.UploadRepository);
  @override
  _i26.Future<void> sendMessage(
    _i25.Message? message,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<List<_i25.Message>> getMessages(
    String? idDevice,
    String? idUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [
            idDevice,
            idUser,
          ],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<List<_i25.Message>> getMoreMessages(
    String? idDevice,
    String? idUser, {
    String? lastIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoreMessages,
          [
            idDevice,
            idUser,
          ],
          {#lastIndex: lastIndex},
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Stream<_i25.MessageModified?> listenMessage(
    String? idDevice,
    String? idUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenMessage,
          [
            idDevice,
            idUser,
          ],
        ),
        returnValue: _i26.Stream<_i25.MessageModified?>.empty(),
      ) as _i26.Stream<_i25.MessageModified?>);
  @override
  _i26.Future<void> stopListeningMessage(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopListeningMessage,
          [idDevice],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> sendMessageWithDatas(
    _i25.Message? message,
    List<_i28.Uint8List>? files,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessageWithDatas,
          [
            message,
            files,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> sendMessageWithFiles(
    _i25.Message? message,
    List<_i27.File>? files,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessageWithFiles,
          [
            message,
            files,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [DeviceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceUseCase extends _i1.Mock implements _i5.DeviceUseCase {
  MockDeviceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.DeviceRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDeviceRepository_14(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i16.DeviceRepository);
  @override
  _i26.Future<void> updateDeviceSettings(_i23.Device? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeviceSettings,
          [device],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> deleteDevice(
    String? idDevice,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDevice,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<List<_i23.Device>> getDevicesByUser(
    dynamic idUser,
    dynamic deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevicesByUser,
          [
            idUser,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<List<_i23.Device>>.value(<_i23.Device>[]),
      ) as _i26.Future<List<_i23.Device>>);
  @override
  _i26.Future<_i23.Device?> getDeviceSettings(
    String? idDevice,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceSettings,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<_i23.Device?>.value(),
      ) as _i26.Future<_i23.Device?>);
}

/// A class which mocks [DeviceUsersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceUsersUseCase extends _i1.Mock
    implements _i7.DeviceUsersUseCase {
  MockDeviceUsersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.DeviceUsersRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDeviceUsersRepository_15(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i17.DeviceUsersRepository);
  @override
  _i26.Future<void> changeAdmin(
    dynamic idUser,
    dynamic idTurtle,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeAdmin,
          [
            idUser,
            idTurtle,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> createInvitation(
    String? email,
    String? idDevice,
    String? nameTurtle,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInvitation,
          [
            email,
            idDevice,
            nameTurtle,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> removeUserOfDevice(
    _i18.DeviceUser? deviceUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserOfDevice,
          [
            deviceUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> addUserToEmergency(
    _i18.DeviceUser? deviceUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToEmergency,
          [
            deviceUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> removeUserEmergency(
    _i18.DeviceUser? deviceUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserEmergency,
          [
            deviceUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<
          (List<_i18.DeviceUser>, List<_i18.DeviceUser>, List<_i18.DeviceUser>)>
      getDeviceUsers(String? idDevice) => (super.noSuchMethod(
            Invocation.method(
              #getDeviceUsers,
              [idDevice],
            ),
            returnValue: _i26.Stream<
                (
                  List<_i18.DeviceUser>,
                  List<_i18.DeviceUser>,
                  List<_i18.DeviceUser>
                )>.empty(),
          ) as _i26.Stream<
              (
                List<_i18.DeviceUser>,
                List<_i18.DeviceUser>,
                List<_i18.DeviceUser>
              )>);
  @override
  _i26.Future<_i18.DeviceUser> getUser(String? idUser) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [idUser],
        ),
        returnValue: _i26.Future<_i18.DeviceUser>.value(_FakeDeviceUser_16(
          this,
          Invocation.method(
            #getUser,
            [idUser],
          ),
        )),
      ) as _i26.Future<_i18.DeviceUser>);
  @override
  _i26.Future<void> acceptInvitation(
    String? idUser,
    Map<String, dynamic>? invitationParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptInvitation,
          [
            idUser,
            invitationParams,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> refuseInvitation(
    _i18.DeviceUser? user,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #refuseInvitation,
          [
            user,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> updateUser(_i18.DeviceUser? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [SoundPhoneUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundPhoneUseCase extends _i1.Mock implements _i12.SoundPhoneUseCase {
  MockSoundPhoneUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.SoundApi get soundApi => (super.noSuchMethod(
        Invocation.getter(#soundApi),
        returnValue: _FakeSoundApi_17(
          this,
          Invocation.getter(#soundApi),
        ),
      ) as _i19.SoundApi);
  @override
  _i26.Future<void> playAudio(_i28.Uint8List? data) => (super.noSuchMethod(
        Invocation.method(
          #playAudio,
          [data],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<_i36.PlaybackDisposition> getPlayerProgress() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlayerProgress,
          [],
        ),
        returnValue: _i26.Stream<_i36.PlaybackDisposition>.empty(),
      ) as _i26.Stream<_i36.PlaybackDisposition>);
  @override
  _i26.Future<void> pauseAudio() => (super.noSuchMethod(
        Invocation.method(
          #pauseAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> stopPlayAudio() => (super.noSuchMethod(
        Invocation.method(
          #stopPlayAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> resumeAudio() => (super.noSuchMethod(
        Invocation.method(
          #resumeAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [InitPhoneUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockInitPhoneUseCase extends _i1.Mock implements _i10.InitPhoneUseCase {
  MockInitPhoneUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.PhoneDeviceCommunication get phoneDeviceCommunication =>
      (super.noSuchMethod(
        Invocation.getter(#phoneDeviceCommunication),
        returnValue: _FakePhoneDeviceCommunication_18(
          this,
          Invocation.getter(#phoneDeviceCommunication),
        ),
      ) as _i20.PhoneDeviceCommunication);
  @override
  _i21.PhoneBoxCommunication get phoneBoxCommunication => (super.noSuchMethod(
        Invocation.getter(#phoneBoxCommunication),
        returnValue: _FakePhoneBoxCommunication_19(
          this,
          Invocation.getter(#phoneBoxCommunication),
        ),
      ) as _i21.PhoneBoxCommunication);
  @override
  _i16.DeviceRepository get deviceRepository => (super.noSuchMethod(
        Invocation.getter(#deviceRepository),
        returnValue: _FakeDeviceRepository_14(
          this,
          Invocation.getter(#deviceRepository),
        ),
      ) as _i16.DeviceRepository);
  @override
  _i22.WifiInformation get wifiInformation => (super.noSuchMethod(
        Invocation.getter(#wifiInformation),
        returnValue: _FakeWifiInformation_20(
          this,
          Invocation.getter(#wifiInformation),
        ),
      ) as _i22.WifiInformation);
  @override
  _i26.Stream<dynamic> get boxEventSubscription => (super.noSuchMethod(
        Invocation.getter(#boxEventSubscription),
        returnValue: _i26.Stream<dynamic>.empty(),
      ) as _i26.Stream<dynamic>);
  @override
  set boxEventSubscription(_i26.Stream<dynamic>? _boxEventSubscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #boxEventSubscription,
          _boxEventSubscription,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i26.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<bool> testWifiDevice(_i34.ConfigDevices? configDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #testWifiDevice,
          [configDevice],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<bool> findDevice(_i23.DeviceType? deviceType) =>
      (super.noSuchMethod(
        Invocation.method(
          #findDevice,
          [deviceType],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<bool> connectToBox(String? ipBox) => (super.noSuchMethod(
        Invocation.method(
          #connectToBox,
          [ipBox],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<bool> sendPasswordToBox(String? password) => (super.noSuchMethod(
        Invocation.method(
          #sendPasswordToBox,
          [password],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Stream<_i37.PhoneBoxSocketState> listenBoxEvent() => (super.noSuchMethod(
        Invocation.method(
          #listenBoxEvent,
          [],
        ),
        returnValue: _i26.Stream<_i37.PhoneBoxSocketState>.empty(),
      ) as _i26.Stream<_i37.PhoneBoxSocketState>);
  @override
  _i26.Future<String?> getSSid() => (super.noSuchMethod(
        Invocation.method(
          #getSSid,
          [],
        ),
        returnValue: _i26.Future<String?>.value(),
      ) as _i26.Future<String?>);
  @override
  _i26.Future<void> createDevicesAndBox(_i34.ConfigDevices? configDevices) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDevicesAndBox,
          [configDevices],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i38.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<_i39.AuthDeviceUser?> getAuth() => (super.noSuchMethod(
        Invocation.method(
          #getAuth,
          [],
        ),
        returnValue: _i26.Future<_i39.AuthDeviceUser?>.value(),
      ) as _i26.Future<_i39.AuthDeviceUser?>);
  @override
  _i26.Future<bool> isSignIn() => (super.noSuchMethod(
        Invocation.method(
          #isSignIn,
          [],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<_i39.AuthDeviceUser?> signIn(
    String? id,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            id,
            password,
          ],
        ),
        returnValue: _i26.Future<_i39.AuthDeviceUser?>.value(),
      ) as _i26.Future<_i39.AuthDeviceUser?>);
  @override
  _i26.Future<_i39.AuthDeviceUser?> logWithAuthGoogle() => (super.noSuchMethod(
        Invocation.method(
          #logWithAuthGoogle,
          [],
        ),
        returnValue: _i26.Future<_i39.AuthDeviceUser?>.value(),
      ) as _i26.Future<_i39.AuthDeviceUser?>);
}

/// A class which mocks [MessageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageRepository extends _i1.Mock implements _i14.MessageRepository {
  MockMessageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<void> sendMessage(
    _i25.Message? message,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<List<_i25.Message>> deviceMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #deviceMessages,
          [idDevice],
        ),
        returnValue: _i26.Stream<List<_i25.Message>>.empty(),
      ) as _i26.Stream<List<_i25.Message>>);
  @override
  _i26.Future<void> setMessageRead(
    String? idDevice,
    _i25.Message? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMessageRead,
          [
            idDevice,
            message,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<List<_i25.Message>> getMoreMessages(
    String? idDevice,
    String? idUser, {
    String? lastIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoreMessages,
          [
            idDevice,
            idUser,
          ],
          {#lastIndex: lastIndex},
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<List<_i25.Message>> getMessages(
    String? idDevice,
    String? idUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [
            idDevice,
            idUser,
          ],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<List<_i25.Message>> getNewMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewMessages,
          [idDevice],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<List<_i25.Message>> getLastMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastMessages,
          [idDevice],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<List<_i25.Message>> getFamilyMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFamilyMessages,
          [idDevice],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<void> stopListeningDeviceMessage(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopListeningDeviceMessage,
          [idDevice],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<_i25.MessageModified?> listenMessage(
    String? idDevice,
    String? idUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenMessage,
          [
            idDevice,
            idUser,
          ],
        ),
        returnValue: _i26.Stream<_i25.MessageModified?>.empty(),
      ) as _i26.Stream<_i25.MessageModified?>);
}

/// A class which mocks [DeviceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceRepository extends _i1.Mock implements _i16.DeviceRepository {
  MockDeviceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<void> updateDeviceSettings(_i23.Device? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeviceSettings,
          [device],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<_i23.Device?> getDevice(
    String? deviceId,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevice,
          [
            deviceId,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<_i23.Device?>.value(),
      ) as _i26.Future<_i23.Device?>);
  @override
  _i26.Future<bool> deviceExist(
    String? deviceId,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deviceExist,
          [
            deviceId,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<void> deleteDevice(
    String? idDevice,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDevice,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<List<_i23.Device>> getDevicesByUser(
    dynamic idUser,
    dynamic deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevicesByUser,
          [
            idUser,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<List<_i23.Device>>.value(<_i23.Device>[]),
      ) as _i26.Future<List<_i23.Device>>);
  @override
  _i26.Future<_i23.Device?> getDeviceSettings(
    String? idDevice,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceSettings,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<_i23.Device?>.value(),
      ) as _i26.Future<_i23.Device?>);
  @override
  _i26.Future<_i23.Device> createDevice(_i34.ConfigDevices? configDevices) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDevice,
          [configDevices],
        ),
        returnValue: _i26.Future<_i23.Device>.value(_FakeDevice_21(
          this,
          Invocation.method(
            #createDevice,
            [configDevices],
          ),
        )),
      ) as _i26.Future<_i23.Device>);
}

/// A class which mocks [DeviceUsersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceUsersRepository extends _i1.Mock
    implements _i17.DeviceUsersRepository {
  MockDeviceUsersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<void> changeAdmin(
    dynamic idUser,
    dynamic idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeAdmin,
          [
            idUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> createInvitation(
    String? email,
    String? idDevice,
    String? nameForDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInvitation,
          [
            email,
            idDevice,
            nameForDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> removeUserOfDevice(
    _i18.DeviceUser? turtleUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserOfDevice,
          [
            turtleUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> addUserToEmergency(
    _i18.DeviceUser? turtleUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToEmergency,
          [
            turtleUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> removeUserEmergency(
    _i18.DeviceUser? turtleUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserEmergency,
          [
            turtleUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<
          (List<_i18.DeviceUser>, List<_i18.DeviceUser>, List<_i18.DeviceUser>)>
      getDeviceUsers(String? idDevice) => (super.noSuchMethod(
            Invocation.method(
              #getDeviceUsers,
              [idDevice],
            ),
            returnValue: _i26.Stream<
                (
                  List<_i18.DeviceUser>,
                  List<_i18.DeviceUser>,
                  List<_i18.DeviceUser>
                )>.empty(),
          ) as _i26.Stream<
              (
                List<_i18.DeviceUser>,
                List<_i18.DeviceUser>,
                List<_i18.DeviceUser>
              )>);
  @override
  _i26.Future<_i18.DeviceUser> getUser(String? idUser) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [idUser],
        ),
        returnValue: _i26.Future<_i18.DeviceUser>.value(_FakeDeviceUser_16(
          this,
          Invocation.method(
            #getUser,
            [idUser],
          ),
        )),
      ) as _i26.Future<_i18.DeviceUser>);
  @override
  _i26.Future<void> acceptInvitation(
    String? idUser,
    Map<String, dynamic>? invitationParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptInvitation,
          [
            idUser,
            invitationParams,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<_i18.DeviceUser> updateUser(_i18.DeviceUser? userDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [userDevice],
        ),
        returnValue: _i26.Future<_i18.DeviceUser>.value(_FakeDeviceUser_16(
          this,
          Invocation.method(
            #updateUser,
            [userDevice],
          ),
        )),
      ) as _i26.Future<_i18.DeviceUser>);
  @override
  _i26.Future<void> refuseInvitation(
    dynamic idUser,
    dynamic idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #refuseInvitation,
          [
            idUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [PhoneDeviceCommunication].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoneDeviceCommunication extends _i1.Mock
    implements _i20.PhoneDeviceCommunication {
  MockPhoneDeviceCommunication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<bool> findDevice(_i23.DeviceType? deviceType) =>
      (super.noSuchMethod(
        Invocation.method(
          #findDevice,
          [deviceType],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<bool> testWifiDevice(_i34.ConfigDevices? configDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #testWifiDevice,
          [configDevice],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<void> setConfig(_i34.ConfigDevices? configDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConfig,
          [configDevice],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [PhoneBoxCommunication].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoneBoxCommunication extends _i1.Mock
    implements _i21.PhoneBoxCommunication {
  MockPhoneBoxCommunication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> connect(String? ipAddr) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [ipAddr],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> setConfig(
    String? email,
    String? pswdBox,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConfig,
          [
            email,
            pswdBox,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> addTurtle(_i23.Turtle? turtle) => (super.noSuchMethod(
        Invocation.method(
          #addTurtle,
          [turtle],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> addEmergency(_i23.Emergency? emergency) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEmergency,
          [emergency],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> isConfig() => (super.noSuchMethod(
        Invocation.method(
          #isConfig,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<_i37.PhoneBoxSocketState> listenBoxEvent() => (super.noSuchMethod(
        Invocation.method(
          #listenBoxEvent,
          [],
        ),
        returnValue: _i26.Stream<_i37.PhoneBoxSocketState>.empty(),
      ) as _i26.Stream<_i37.PhoneBoxSocketState>);
  @override
  _i26.Future<void> sendPasswordToBox(String? password) => (super.noSuchMethod(
        Invocation.method(
          #sendPasswordToBox,
          [password],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [RemoteAuthDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteAuthDataSource extends _i1.Mock
    implements _i40.RemoteAuthDataSource {
  MockRemoteAuthDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<_i39.AuthDeviceUser?> getAuth() => (super.noSuchMethod(
        Invocation.method(
          #getAuth,
          [],
        ),
        returnValue: _i26.Future<_i39.AuthDeviceUser?>.value(),
      ) as _i26.Future<_i39.AuthDeviceUser?>);
  @override
  _i26.Future<bool> isSignIn() => (super.noSuchMethod(
        Invocation.method(
          #isSignIn,
          [],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<_i39.AuthDeviceUser?> signIn(
    String? id,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            id,
            password,
          ],
        ),
        returnValue: _i26.Future<_i39.AuthDeviceUser?>.value(),
      ) as _i26.Future<_i39.AuthDeviceUser?>);
  @override
  _i26.Future<_i39.AuthDeviceUser?> logWithAuthGoogle() => (super.noSuchMethod(
        Invocation.method(
          #logWithAuthGoogle,
          [],
        ),
        returnValue: _i26.Future<_i39.AuthDeviceUser?>.value(),
      ) as _i26.Future<_i39.AuthDeviceUser?>);
}

/// A class which mocks [RemoteMessageDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteMessageDataSource extends _i1.Mock
    implements _i41.RemoteMessageDataSource {
  MockRemoteMessageDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Stream<List<_i25.Message>> deviceMessages(String? idTurtle) =>
      (super.noSuchMethod(
        Invocation.method(
          #deviceMessages,
          [idTurtle],
        ),
        returnValue: _i26.Stream<List<_i25.Message>>.empty(),
      ) as _i26.Stream<List<_i25.Message>>);
  @override
  _i26.Future<void> sendMessage(
    _i25.Message? message,
    String? turtleId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            turtleId,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<List<_i25.Message>> getMoreMessages(
    String? idDevice,
    String? idUser, {
    String? lastIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoreMessages,
          [
            idDevice,
            idUser,
          ],
          {#lastIndex: lastIndex},
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<List<_i25.Message>> getMessages(
    String? idDevice,
    String? idUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [
            idDevice,
            idUser,
          ],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<void> setMessageRead(
    String? idTurtle,
    _i25.Message? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMessageRead,
          [
            idTurtle,
            message,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> stopListeningDeviceMessage(String? idTurtle) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopListeningDeviceMessage,
          [idTurtle],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<_i25.MessageModified?> listenMessage(
    String? idDevice,
    String? idUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenMessage,
          [
            idDevice,
            idUser,
          ],
        ),
        returnValue: _i26.Stream<_i25.MessageModified?>.empty(),
      ) as _i26.Stream<_i25.MessageModified?>);
  @override
  _i26.Future<List<_i25.Message>> getFamilyMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFamilyMessages,
          [idDevice],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<List<_i25.Message>> getLastMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastMessages,
          [idDevice],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
  @override
  _i26.Future<List<_i25.Message>> getNewMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewMessages,
          [idDevice],
        ),
        returnValue: _i26.Future<List<_i25.Message>>.value(<_i25.Message>[]),
      ) as _i26.Future<List<_i25.Message>>);
}

/// A class which mocks [RemoteDeviceDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDeviceDataSource extends _i1.Mock
    implements _i42.RemoteDeviceDataSource {
  MockRemoteDeviceDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<void> updateDeviceSettings(_i23.Device? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeviceSettings,
          [device],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<_i23.Device?> listenDevice(dynamic idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenDevice,
          [idDevice],
        ),
        returnValue: _i26.Stream<_i23.Device?>.empty(),
      ) as _i26.Stream<_i23.Device?>);
  @override
  _i26.Future<_i23.Device?> getDeviceSettings(
    dynamic idDevice,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceSettings,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<_i23.Device?>.value(),
      ) as _i26.Future<_i23.Device?>);
  @override
  _i26.Future<void> deleteDevice(
    String? idDevice,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDevice,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<_i23.Device> createDevice(_i34.ConfigDevices? configDevices) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDevice,
          [configDevices],
        ),
        returnValue: _i26.Future<_i23.Device>.value(_FakeDevice_21(
          this,
          Invocation.method(
            #createDevice,
            [configDevices],
          ),
        )),
      ) as _i26.Future<_i23.Device>);
  @override
  _i26.Future<List<_i23.Device>> getDevicesByUser(
    dynamic idUser,
    dynamic deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevicesByUser,
          [
            idUser,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<List<_i23.Device>>.value(<_i23.Device>[]),
      ) as _i26.Future<List<_i23.Device>>);
  @override
  _i26.Future<bool> deviceExist(
    String? deviceId,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deviceExist,
          [
            deviceId,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<bool>.value(false),
      ) as _i26.Future<bool>);
  @override
  _i26.Future<_i23.Device?> getDevice(
    String? deviceId,
    _i23.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevice,
          [
            deviceId,
            deviceType,
          ],
        ),
        returnValue: _i26.Future<_i23.Device?>.value(),
      ) as _i26.Future<_i23.Device?>);
}

/// A class which mocks [RemoteDeviceUsersDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDeviceUsersDataSource extends _i1.Mock
    implements _i43.RemoteDeviceUsersDataSource {
  MockRemoteDeviceUsersDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<void> changeAdmin(
    dynamic idUser,
    dynamic idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeAdmin,
          [
            idUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> createInvitation(
    String? email,
    String? idDevice,
    String? nameForDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInvitation,
          [
            email,
            idDevice,
            nameForDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> removeUserOfDevice(
    _i18.DeviceUser? turtleUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserOfDevice,
          [
            turtleUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> addUserToEmergency(
    _i18.DeviceUser? turtleUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserToEmergency,
          [
            turtleUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> removeUserEmergency(
    _i18.DeviceUser? turtleUser,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserEmergency,
          [
            turtleUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<
          (List<_i18.DeviceUser>, List<_i18.DeviceUser>, List<_i18.DeviceUser>)>
      getDeviceUsers(String? idDevice) => (super.noSuchMethod(
            Invocation.method(
              #getDeviceUsers,
              [idDevice],
            ),
            returnValue: _i26.Stream<
                (
                  List<_i18.DeviceUser>,
                  List<_i18.DeviceUser>,
                  List<_i18.DeviceUser>
                )>.empty(),
          ) as _i26.Stream<
              (
                List<_i18.DeviceUser>,
                List<_i18.DeviceUser>,
                List<_i18.DeviceUser>
              )>);
  @override
  _i26.Future<_i18.DeviceUser> getUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [userId],
        ),
        returnValue: _i26.Future<_i18.DeviceUser>.value(_FakeDeviceUser_16(
          this,
          Invocation.method(
            #getUser,
            [userId],
          ),
        )),
      ) as _i26.Future<_i18.DeviceUser>);
  @override
  _i26.Future<void> acceptInvitation(
    String? idUser,
    Map<String, dynamic>? invitationParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #acceptInvitation,
          [
            idUser,
            invitationParams,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<_i18.DeviceUser> updateUser(_i18.DeviceUser? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i26.Future<_i18.DeviceUser>.value(_FakeDeviceUser_16(
          this,
          Invocation.method(
            #updateUser,
            [user],
          ),
        )),
      ) as _i26.Future<_i18.DeviceUser>);
  @override
  _i26.Future<void> refuseInvitation(
    dynamic idUser,
    dynamic idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #refuseInvitation,
          [
            idUser,
            idDevice,
          ],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [SoundApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundApi extends _i1.Mock implements _i19.SoundApi {
  MockSoundApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<void> recordAudio() => (super.noSuchMethod(
        Invocation.method(
          #recordAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Stream<_i36.PlaybackDisposition> getPlayerProgress() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlayerProgress,
          [],
        ),
        returnValue: _i26.Stream<_i36.PlaybackDisposition>.empty(),
      ) as _i26.Stream<_i36.PlaybackDisposition>);
  @override
  _i26.Future<void> playAudio(_i28.Uint8List? data) => (super.noSuchMethod(
        Invocation.method(
          #playAudio,
          [data],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<List<int>> stopAudioRecord() => (super.noSuchMethod(
        Invocation.method(
          #stopAudioRecord,
          [],
        ),
        returnValue: _i26.Future<List<int>>.value(<int>[]),
      ) as _i26.Future<List<int>>);
  @override
  _i26.Future<void> initRecorder() => (super.noSuchMethod(
        Invocation.method(
          #initRecorder,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> resumeAudio() => (super.noSuchMethod(
        Invocation.method(
          #resumeAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> pauseAudio() => (super.noSuchMethod(
        Invocation.method(
          #pauseAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
  @override
  _i26.Future<void> stopPlayAudio() => (super.noSuchMethod(
        Invocation.method(
          #stopPlayAudio,
          [],
        ),
        returnValue: _i26.Future<void>.value(),
        returnValueForMissingStub: _i26.Future<void>.value(),
      ) as _i26.Future<void>);
}

/// A class which mocks [WifiInformation].
///
/// See the documentation for Mockito's code generation for more information.
class MockWifiInformation extends _i1.Mock implements _i22.WifiInformation {
  MockWifiInformation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i26.Future<String?> getSSid() => (super.noSuchMethod(
        Invocation.method(
          #getSSid,
          [],
        ),
        returnValue: _i26.Future<String?>.value(),
      ) as _i26.Future<String?>);
}
