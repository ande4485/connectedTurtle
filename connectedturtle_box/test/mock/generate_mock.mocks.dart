// Mocks generated by Mockito 5.4.1 from annotations
// in turtle_box/test/mock/generate_mock.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i15;
import 'dart:io' as _i29;
import 'dart:typed_data' as _i28;

import 'package:flutter_bloc/flutter_bloc.dart' as _i21;
import 'package:flutter_sound/public/flutter_sound_player.dart' as _i27;
import 'package:mockito/mockito.dart' as _i1;
import 'package:turtle_box/data/communication/box_turtle_com_impl.dart' as _i18;
import 'package:turtle_box/domain/communication/box_turtle_com.dart' as _i9;
import 'package:turtle_box/domain/config/box_config.dart' as _i13;
import 'package:turtle_box/domain/password_generator/password_generator.dart'
    as _i14;
import 'package:turtle_box/domain/usecase/box_usecase.dart' as _i3;
import 'package:turtle_box/domain/usecase/sound_box_usecase.dart' as _i26;
import 'package:turtle_box/presentation/bloc/box_bloc.dart' as _i20;
import 'package:turtle_box/presentation/bloc/box_message_bloc.dart' as _i25;
import 'package:turtle_box/presentation/bloc/box_message_state.dart' as _i7;
import 'package:turtle_box/presentation/bloc/box_state.dart' as _i4;
import 'package:turtle_package/data/communication/socket/box_socket_state.dart'
    as _i19;
import 'package:turtle_package/data/communication/socket/socket_server.dart'
    as _i2;
import 'package:turtle_package/domain/repository/auth_repository.dart' as _i10;
import 'package:turtle_package/domain/repository/box_repository.dart' as _i11;
import 'package:turtle_package/domain/repository/device_repository.dart'
    as _i12;
import 'package:turtle_package/domain/repository/message_repository.dart'
    as _i8;
import 'package:turtle_package/domain/repository/upload_repository.dart'
    as _i17;
import 'package:turtle_package/domain/sound/sound_api.dart' as _i16;
import 'package:turtle_package/domain/usecase/box_message_usecase.dart' as _i6;
import 'package:turtle_package/model/auth_device_user.dart' as _i22;
import 'package:turtle_package/model/config_devices.dart' as _i23;
import 'package:turtle_package/model/device.dart' as _i5;
import 'package:turtle_package/model/message.dart' as _i24;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSocketServer_0 extends _i1.SmartFake implements _i2.SocketServer {
  _FakeSocketServer_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBoxUseCase_1 extends _i1.SmartFake implements _i3.BoxUseCase {
  _FakeBoxUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBoxState_2 extends _i1.SmartFake implements _i4.BoxState {
  _FakeBoxState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDevice_3 extends _i1.SmartFake implements _i5.Device {
  _FakeDevice_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBoxMessageUseCase_4 extends _i1.SmartFake
    implements _i6.BoxMessageUseCase {
  _FakeBoxMessageUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBoxMessageState_5 extends _i1.SmartFake
    implements _i7.BoxMessageState {
  _FakeBoxMessageState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageRepository_6 extends _i1.SmartFake
    implements _i8.MessageRepository {
  _FakeMessageRepository_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBoxCommunication_7 extends _i1.SmartFake
    implements _i9.BoxCommunication {
  _FakeBoxCommunication_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_8 extends _i1.SmartFake
    implements _i10.AuthRepository {
  _FakeAuthRepository_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBoxRepository_9 extends _i1.SmartFake implements _i11.BoxRepository {
  _FakeBoxRepository_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceRepository_10 extends _i1.SmartFake
    implements _i12.DeviceRepository {
  _FakeDeviceRepository_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBoxConfiguration_11 extends _i1.SmartFake
    implements _i13.BoxConfiguration {
  _FakeBoxConfiguration_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePasswordGenerator_12 extends _i1.SmartFake
    implements _i14.PasswordGenerator {
  _FakePasswordGenerator_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_13 extends _i1.SmartFake implements Duration {
  _FakeDuration_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_14<T> extends _i1.SmartFake
    implements _i15.StreamController<T> {
  _FakeStreamController_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSoundApi_15 extends _i1.SmartFake implements _i16.SoundApi {
  _FakeSoundApi_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUploadRepository_16 extends _i1.SmartFake
    implements _i17.UploadRepository {
  _FakeUploadRepository_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BoxComImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoxComImpl extends _i1.Mock implements _i18.BoxComImpl {
  MockBoxComImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SocketServer get socketServer => (super.noSuchMethod(
        Invocation.getter(#socketServer),
        returnValue: _FakeSocketServer_0(
          this,
          Invocation.getter(#socketServer),
        ),
      ) as _i2.SocketServer);
  @override
  _i15.Stream<_i19.BoxSocketState> listeningDeviceEvent() =>
      (super.noSuchMethod(
        Invocation.method(
          #listeningDeviceEvent,
          [],
        ),
        returnValue: _i15.Stream<_i19.BoxSocketState>.empty(),
      ) as _i15.Stream<_i19.BoxSocketState>);
  @override
  _i15.Future<void> newMessageReceived(String? idTurtle) => (super.noSuchMethod(
        Invocation.method(
          #newMessageReceived,
          [idTurtle],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> start(String? ip) => (super.noSuchMethod(
        Invocation.method(
          #start,
          [ip],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> boxIsConfig(String? idBox) => (super.noSuchMethod(
        Invocation.method(
          #boxIsConfig,
          [idBox],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> disconnectAllTurtle() => (super.noSuchMethod(
        Invocation.method(
          #disconnectAllTurtle,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> acceptSmartphone() => (super.noSuchMethod(
        Invocation.method(
          #acceptSmartphone,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> notAcceptedSmartphone() => (super.noSuchMethod(
        Invocation.method(
          #notAcceptedSmartphone,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> askSmartphoneForPassword() => (super.noSuchMethod(
        Invocation.method(
          #askSmartphoneForPassword,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [BoxBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoxBloc extends _i1.Mock implements _i20.BoxBloc {
  MockBoxBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.BoxUseCase get boxUseCase => (super.noSuchMethod(
        Invocation.getter(#boxUseCase),
        returnValue: _FakeBoxUseCase_1(
          this,
          Invocation.getter(#boxUseCase),
        ),
      ) as _i3.BoxUseCase);
  @override
  _i4.BoxState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeBoxState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.BoxState);
  @override
  _i15.Stream<_i4.BoxState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i15.Stream<_i4.BoxState>.empty(),
      ) as _i15.Stream<_i4.BoxState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  String getDeviceId() => (super.noSuchMethod(
        Invocation.method(
          #getDeviceId,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i4.BoxState getBoxState() => (super.noSuchMethod(
        Invocation.method(
          #getBoxState,
          [],
        ),
        returnValue: _FakeBoxState_2(
          this,
          Invocation.method(
            #getBoxState,
            [],
          ),
        ),
      ) as _i4.BoxState);
  @override
  void restart() => super.noSuchMethod(
        Invocation.method(
          #restart,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.Future<void> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  void emit(_i4.BoxState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i21.Change<_i4.BoxState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i10.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<_i22.AuthDeviceUser?> getAuth() => (super.noSuchMethod(
        Invocation.method(
          #getAuth,
          [],
        ),
        returnValue: _i15.Future<_i22.AuthDeviceUser?>.value(),
      ) as _i15.Future<_i22.AuthDeviceUser?>);
  @override
  _i15.Future<bool> isSignIn() => (super.noSuchMethod(
        Invocation.method(
          #isSignIn,
          [],
        ),
        returnValue: _i15.Future<bool>.value(false),
      ) as _i15.Future<bool>);
  @override
  _i15.Future<_i22.AuthDeviceUser?> signIn(
    String? id,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            id,
            password,
          ],
        ),
        returnValue: _i15.Future<_i22.AuthDeviceUser?>.value(),
      ) as _i15.Future<_i22.AuthDeviceUser?>);
  @override
  _i15.Future<_i22.AuthDeviceUser?> logWithAuthGoogle() => (super.noSuchMethod(
        Invocation.method(
          #logWithAuthGoogle,
          [],
        ),
        returnValue: _i15.Future<_i22.AuthDeviceUser?>.value(),
      ) as _i15.Future<_i22.AuthDeviceUser?>);
}

/// A class which mocks [DeviceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceRepository extends _i1.Mock implements _i12.DeviceRepository {
  MockDeviceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<void> updateDeviceSettings(_i5.Device? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeviceSettings,
          [device],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<_i5.Device?> getDevice(
    String? deviceId,
    _i5.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevice,
          [
            deviceId,
            deviceType,
          ],
        ),
        returnValue: _i15.Future<_i5.Device?>.value(),
      ) as _i15.Future<_i5.Device?>);
  @override
  _i15.Future<bool> deviceExist(
    String? deviceId,
    _i5.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deviceExist,
          [
            deviceId,
            deviceType,
          ],
        ),
        returnValue: _i15.Future<bool>.value(false),
      ) as _i15.Future<bool>);
  @override
  _i15.Future<void> deleteDevice(
    String? idDevice,
    _i5.DeviceType? deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDevice,
          [
            idDevice,
            deviceType,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<List<_i5.Device>> getDevicesByUser(
    dynamic idUser,
    dynamic deviceType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevicesByUser,
          [
            idUser,
            deviceType,
          ],
        ),
        returnValue: _i15.Future<List<_i5.Device>>.value(<_i5.Device>[]),
      ) as _i15.Future<List<_i5.Device>>);
  @override
  _i15.Future<Map<String, dynamic>> getDeviceSettings(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceSettings,
          [idDevice],
        ),
        returnValue:
            _i15.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i15.Future<Map<String, dynamic>>);
  @override
  _i15.Future<_i5.Device> createDevice(_i23.ConfigDevices? configDevices) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDevice,
          [configDevices],
        ),
        returnValue: _i15.Future<_i5.Device>.value(_FakeDevice_3(
          this,
          Invocation.method(
            #createDevice,
            [configDevices],
          ),
        )),
      ) as _i15.Future<_i5.Device>);
}

/// A class which mocks [MessageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageRepository extends _i1.Mock implements _i8.MessageRepository {
  MockMessageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<void> sendMessage(
    _i24.Message? message,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            idDevice,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Stream<List<_i24.Message>> deviceMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #deviceMessages,
          [idDevice],
        ),
        returnValue: _i15.Stream<List<_i24.Message>>.empty(),
      ) as _i15.Stream<List<_i24.Message>>);
  @override
  _i15.Future<void> setMessageRead(
    String? idDevice,
    _i24.Message? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMessageRead,
          [
            idDevice,
            message,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<List<_i24.Message>> getMoreMessages(
    String? idDevice,
    String? idUser, {
    String? lastIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoreMessages,
          [
            idDevice,
            idUser,
          ],
          {#lastIndex: lastIndex},
        ),
        returnValue: _i15.Future<List<_i24.Message>>.value(<_i24.Message>[]),
      ) as _i15.Future<List<_i24.Message>>);
  @override
  _i15.Future<List<_i24.Message>> getMessages(
    String? idDevice,
    String? idUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [
            idDevice,
            idUser,
          ],
        ),
        returnValue: _i15.Future<List<_i24.Message>>.value(<_i24.Message>[]),
      ) as _i15.Future<List<_i24.Message>>);
  @override
  _i15.Future<List<_i24.Message>> getNewMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewMessages,
          [idDevice],
        ),
        returnValue: _i15.Future<List<_i24.Message>>.value(<_i24.Message>[]),
      ) as _i15.Future<List<_i24.Message>>);
  @override
  _i15.Future<List<_i24.Message>> getLastMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastMessages,
          [idDevice],
        ),
        returnValue: _i15.Future<List<_i24.Message>>.value(<_i24.Message>[]),
      ) as _i15.Future<List<_i24.Message>>);
  @override
  _i15.Future<List<_i24.Message>> getFamilyMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFamilyMessages,
          [idDevice],
        ),
        returnValue: _i15.Future<List<_i24.Message>>.value(<_i24.Message>[]),
      ) as _i15.Future<List<_i24.Message>>);
  @override
  _i15.Future<void> stopListeningDeviceMessage(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopListeningDeviceMessage,
          [idDevice],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Stream<List<_i24.MessageModified>> listenMessage(
    String? idDevice,
    String? idUser,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenMessage,
          [
            idDevice,
            idUser,
          ],
        ),
        returnValue: _i15.Stream<List<_i24.MessageModified>>.empty(),
      ) as _i15.Stream<List<_i24.MessageModified>>);
}

/// A class which mocks [BoxCommunication].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoxCommunication extends _i1.Mock implements _i9.BoxCommunication {
  MockBoxCommunication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<void> start(String? ip) => (super.noSuchMethod(
        Invocation.method(
          #start,
          [ip],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Stream<_i19.BoxSocketState> listeningDeviceEvent() =>
      (super.noSuchMethod(
        Invocation.method(
          #listeningDeviceEvent,
          [],
        ),
        returnValue: _i15.Stream<_i19.BoxSocketState>.empty(),
      ) as _i15.Stream<_i19.BoxSocketState>);
  @override
  _i15.Future<void> newMessageReceived(String? idTurtle) => (super.noSuchMethod(
        Invocation.method(
          #newMessageReceived,
          [idTurtle],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> boxIsConfig(String? idBox) => (super.noSuchMethod(
        Invocation.method(
          #boxIsConfig,
          [idBox],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> disconnectAllTurtle() => (super.noSuchMethod(
        Invocation.method(
          #disconnectAllTurtle,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> acceptSmartphone() => (super.noSuchMethod(
        Invocation.method(
          #acceptSmartphone,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> notAcceptedSmartphone() => (super.noSuchMethod(
        Invocation.method(
          #notAcceptedSmartphone,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> askSmartphoneForPassword() => (super.noSuchMethod(
        Invocation.method(
          #askSmartphoneForPassword,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [BoxConfiguration].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoxConfiguration extends _i1.Mock implements _i13.BoxConfiguration {
  MockBoxConfiguration() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<String> getIp() => (super.noSuchMethod(
        Invocation.method(
          #getIp,
          [],
        ),
        returnValue: _i15.Future<String>.value(''),
      ) as _i15.Future<String>);
}

/// A class which mocks [BoxRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoxRepository extends _i1.Mock implements _i11.BoxRepository {
  MockBoxRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<void> setEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> addTurtle(_i5.Device? device) => (super.noSuchMethod(
        Invocation.method(
          #addTurtle,
          [device],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> addEmergency(_i5.Device? device) => (super.noSuchMethod(
        Invocation.method(
          #addEmergency,
          [device],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [BoxMessageBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoxMessageBloc extends _i1.Mock implements _i25.BoxMessageBloc {
  MockBoxMessageBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.BoxMessageUseCase get messageUseCase => (super.noSuchMethod(
        Invocation.getter(#messageUseCase),
        returnValue: _FakeBoxMessageUseCase_4(
          this,
          Invocation.getter(#messageUseCase),
        ),
      ) as _i6.BoxMessageUseCase);
  @override
  _i7.BoxMessageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeBoxMessageState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.BoxMessageState);
  @override
  _i15.Stream<_i7.BoxMessageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i15.Stream<_i7.BoxMessageState>.empty(),
      ) as _i15.Stream<_i7.BoxMessageState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i15.Future<void> setMessageRead(
    String? idTurtle,
    _i24.Message? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMessageRead,
          [
            idTurtle,
            message,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> getNewMessages(String? idTurtle) => (super.noSuchMethod(
        Invocation.method(
          #getNewMessages,
          [idTurtle],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> getLastMessages(String? idTurtle) => (super.noSuchMethod(
        Invocation.method(
          #getLastMessages,
          [idTurtle],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> getFamilyMessages(String? idTurtle) => (super.noSuchMethod(
        Invocation.method(
          #getFamilyMessages,
          [idTurtle],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  void emit(_i7.BoxMessageState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i21.Change<_i7.BoxMessageState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [BoxMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoxMessageUseCase extends _i1.Mock implements _i6.BoxMessageUseCase {
  MockBoxMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.MessageRepository get messageRepository => (super.noSuchMethod(
        Invocation.getter(#messageRepository),
        returnValue: _FakeMessageRepository_6(
          this,
          Invocation.getter(#messageRepository),
        ),
      ) as _i8.MessageRepository);
  @override
  _i15.Future<void> sendMessage(
    _i24.Message? message,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            idDevice,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> setMessageRead(
    String? idDevice,
    _i24.Message? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMessageRead,
          [
            idDevice,
            message,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<List<_i24.Message>> getNewMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewMessages,
          [idDevice],
        ),
        returnValue: _i15.Future<List<_i24.Message>>.value(<_i24.Message>[]),
      ) as _i15.Future<List<_i24.Message>>);
  @override
  _i15.Future<List<_i24.Message>> getLastMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastMessages,
          [idDevice],
        ),
        returnValue: _i15.Future<List<_i24.Message>>.value(<_i24.Message>[]),
      ) as _i15.Future<List<_i24.Message>>);
  @override
  _i15.Future<List<_i24.Message>> getFamilyMessages(String? idDevice) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFamilyMessages,
          [idDevice],
        ),
        returnValue: _i15.Future<List<_i24.Message>>.value(<_i24.Message>[]),
      ) as _i15.Future<List<_i24.Message>>);
}

/// A class which mocks [PasswordGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockPasswordGenerator extends _i1.Mock implements _i14.PasswordGenerator {
  MockPasswordGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generatePassword() => (super.noSuchMethod(
        Invocation.method(
          #generatePassword,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  String getLastPassword() => (super.noSuchMethod(
        Invocation.method(
          #getLastPassword,
          [],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [BoxUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoxUseCase extends _i1.Mock implements _i3.BoxUseCase {
  MockBoxUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.BoxCommunication get boxCommunication => (super.noSuchMethod(
        Invocation.getter(#boxCommunication),
        returnValue: _FakeBoxCommunication_7(
          this,
          Invocation.getter(#boxCommunication),
        ),
      ) as _i9.BoxCommunication);
  @override
  _i10.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_8(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i10.AuthRepository);
  @override
  _i8.MessageRepository get messageRepository => (super.noSuchMethod(
        Invocation.getter(#messageRepository),
        returnValue: _FakeMessageRepository_6(
          this,
          Invocation.getter(#messageRepository),
        ),
      ) as _i8.MessageRepository);
  @override
  _i11.BoxRepository get boxRepository => (super.noSuchMethod(
        Invocation.getter(#boxRepository),
        returnValue: _FakeBoxRepository_9(
          this,
          Invocation.getter(#boxRepository),
        ),
      ) as _i11.BoxRepository);
  @override
  _i12.DeviceRepository get deviceRepository => (super.noSuchMethod(
        Invocation.getter(#deviceRepository),
        returnValue: _FakeDeviceRepository_10(
          this,
          Invocation.getter(#deviceRepository),
        ),
      ) as _i12.DeviceRepository);
  @override
  _i13.BoxConfiguration get boxConfig => (super.noSuchMethod(
        Invocation.getter(#boxConfig),
        returnValue: _FakeBoxConfiguration_11(
          this,
          Invocation.getter(#boxConfig),
        ),
      ) as _i13.BoxConfiguration);
  @override
  _i14.PasswordGenerator get passwordGenerator => (super.noSuchMethod(
        Invocation.getter(#passwordGenerator),
        returnValue: _FakePasswordGenerator_12(
          this,
          Invocation.getter(#passwordGenerator),
        ),
      ) as _i14.PasswordGenerator);
  @override
  _i4.BoxState get boxState => (super.noSuchMethod(
        Invocation.getter(#boxState),
        returnValue: _FakeBoxState_2(
          this,
          Invocation.getter(#boxState),
        ),
      ) as _i4.BoxState);
  @override
  set boxState(_i4.BoxState? _boxState) => super.noSuchMethod(
        Invocation.setter(
          #boxState,
          _boxState,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Duration get timeOutDuration => (super.noSuchMethod(
        Invocation.getter(#timeOutDuration),
        returnValue: _FakeDuration_13(
          this,
          Invocation.getter(#timeOutDuration),
        ),
      ) as Duration);
  @override
  Duration get timeAfterTimeOut => (super.noSuchMethod(
        Invocation.getter(#timeAfterTimeOut),
        returnValue: _FakeDuration_13(
          this,
          Invocation.getter(#timeAfterTimeOut),
        ),
      ) as Duration);
  @override
  Duration get timeAcceptPhoneTimeOut => (super.noSuchMethod(
        Invocation.getter(#timeAcceptPhoneTimeOut),
        returnValue: _FakeDuration_13(
          this,
          Invocation.getter(#timeAcceptPhoneTimeOut),
        ),
      ) as Duration);
  @override
  List<_i3.DeviceConnection?> get deviceConnectedState => (super.noSuchMethod(
        Invocation.getter(#deviceConnectedState),
        returnValue: <_i3.DeviceConnection?>[],
      ) as List<_i3.DeviceConnection?>);
  @override
  String get currentDeviceId => (super.noSuchMethod(
        Invocation.getter(#currentDeviceId),
        returnValue: '',
      ) as String);
  @override
  set currentDeviceId(String? _currentDeviceId) => super.noSuchMethod(
        Invocation.setter(
          #currentDeviceId,
          _currentDeviceId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.StreamController<_i4.BoxState> get boxStateController =>
      (super.noSuchMethod(
        Invocation.getter(#boxStateController),
        returnValue: _FakeStreamController_14<_i4.BoxState>(
          this,
          Invocation.getter(#boxStateController),
        ),
      ) as _i15.StreamController<_i4.BoxState>);
  @override
  _i15.Stream<_i4.BoxState> boxEvent() => (super.noSuchMethod(
        Invocation.method(
          #boxEvent,
          [],
        ),
        returnValue: _i15.Stream<_i4.BoxState>.empty(),
      ) as _i15.Stream<_i4.BoxState>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void restart() => super.noSuchMethod(
        Invocation.method(
          #restart,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.Future<String> setConfigAuthBox() => (super.noSuchMethod(
        Invocation.method(
          #setConfigAuthBox,
          [],
        ),
        returnValue: _i15.Future<String>.value(''),
      ) as _i15.Future<String>);
  @override
  _i15.Future<String> getIp() => (super.noSuchMethod(
        Invocation.method(
          #getIp,
          [],
        ),
        returnValue: _i15.Future<String>.value(''),
      ) as _i15.Future<String>);
  @override
  _i3.DeviceConnection? getDeviceConnection(String? idDevice) =>
      (super.noSuchMethod(Invocation.method(
        #getDeviceConnection,
        [idDevice],
      )) as _i3.DeviceConnection?);
  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SoundBoxUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundBoxUseCase extends _i1.Mock implements _i26.SoundBoxUseCase {
  MockSoundBoxUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.SoundApi get soundApi => (super.noSuchMethod(
        Invocation.getter(#soundApi),
        returnValue: _FakeSoundApi_15(
          this,
          Invocation.getter(#soundApi),
        ),
      ) as _i16.SoundApi);
  @override
  _i17.UploadRepository get uploadRepository => (super.noSuchMethod(
        Invocation.getter(#uploadRepository),
        returnValue: _FakeUploadRepository_16(
          this,
          Invocation.getter(#uploadRepository),
        ),
      ) as _i17.UploadRepository);
  @override
  _i8.MessageRepository get boxMessageRepository => (super.noSuchMethod(
        Invocation.getter(#boxMessageRepository),
        returnValue: _FakeMessageRepository_6(
          this,
          Invocation.getter(#boxMessageRepository),
        ),
      ) as _i8.MessageRepository);
  @override
  _i15.Future<void> initRecorder() => (super.noSuchMethod(
        Invocation.method(
          #initRecorder,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> recordAudio() => (super.noSuchMethod(
        Invocation.method(
          #recordAudio,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> stopAndSaveAudio(
    _i5.Turtle? device,
    List<String>? toId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopAndSaveAudio,
          [
            device,
            toId,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [SoundApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockSoundApi extends _i1.Mock implements _i16.SoundApi {
  MockSoundApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<void> recordAudio() => (super.noSuchMethod(
        Invocation.method(
          #recordAudio,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Stream<_i27.PlaybackDisposition> getPlayerProgress() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlayerProgress,
          [],
        ),
        returnValue: _i15.Stream<_i27.PlaybackDisposition>.empty(),
      ) as _i15.Stream<_i27.PlaybackDisposition>);
  @override
  _i15.Future<void> playAudio(_i28.Uint8List? data) => (super.noSuchMethod(
        Invocation.method(
          #playAudio,
          [data],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<List<int>> stopAudioRecord() => (super.noSuchMethod(
        Invocation.method(
          #stopAudioRecord,
          [],
        ),
        returnValue: _i15.Future<List<int>>.value(<int>[]),
      ) as _i15.Future<List<int>>);
  @override
  _i15.Future<void> initRecorder() => (super.noSuchMethod(
        Invocation.method(
          #initRecorder,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> resumeAudio() => (super.noSuchMethod(
        Invocation.method(
          #resumeAudio,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> pauseAudio() => (super.noSuchMethod(
        Invocation.method(
          #pauseAudio,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
  @override
  _i15.Future<void> stopPlayAudio() => (super.noSuchMethod(
        Invocation.method(
          #stopPlayAudio,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [UploadRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadRepository extends _i1.Mock implements _i17.UploadRepository {
  MockUploadRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<List<String>> uploadImagesDatas(
    List<_i28.Uint8List>? imagesPath,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImagesDatas,
          [
            imagesPath,
            idDevice,
          ],
        ),
        returnValue: _i15.Future<List<String>>.value(<String>[]),
      ) as _i15.Future<List<String>>);
  @override
  _i15.Future<List<String>> uploadVideosDatas(
    List<_i28.Uint8List>? videosPath,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadVideosDatas,
          [
            videosPath,
            idDevice,
          ],
        ),
        returnValue: _i15.Future<List<String>>.value(<String>[]),
      ) as _i15.Future<List<String>>);
  @override
  _i15.Future<List<String>> uploadImagesFiles(
    List<_i29.File>? imagesPath,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImagesFiles,
          [
            imagesPath,
            idDevice,
          ],
        ),
        returnValue: _i15.Future<List<String>>.value(<String>[]),
      ) as _i15.Future<List<String>>);
  @override
  _i15.Future<List<String>> uploadVideosFiles(
    List<_i29.File>? videosPath,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadVideosFiles,
          [
            videosPath,
            idDevice,
          ],
        ),
        returnValue: _i15.Future<List<String>>.value(<String>[]),
      ) as _i15.Future<List<String>>);
  @override
  _i15.Future<String> uploadSoundDatas(
    List<int>? soundPath,
    String? idDevice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadSoundDatas,
          [
            soundPath,
            idDevice,
          ],
        ),
        returnValue: _i15.Future<String>.value(''),
      ) as _i15.Future<String>);
}
